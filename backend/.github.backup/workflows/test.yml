name: 🧪 Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  unit-tests:
    name: 🔬 Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🏗️ Generate Prisma Client
      run: npx prisma generate
      
    - name: 🔬 Run Unit Tests
      run: npm run test:unit
      
    - name: 📊 Upload Unit Test Coverage
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage/lcov.info
        flags: unit-tests
        name: unit-tests-${{ matrix.node-version }}

  integration-tests:
    name: 🏗️ Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: test_taskmanagement
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🏗️ Generate Prisma Client
      run: npx prisma generate
      
    - name: 🗄️ Run Database Migrations
      run: npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5433/test_taskmanagement?schema=public
        
    - name: 🏗️ Run Integration Tests
      run: npm run test:integration
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5433/test_taskmanagement?schema=public
        JWT_SECRET: test-jwt-secret-key-for-ci
        JWT_REFRESH_SECRET: test-refresh-token-secret-for-ci
        NODE_ENV: test
        
    - name: 📊 Upload Integration Test Coverage
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage/lcov.info
        flags: integration-tests
        name: integration-tests

  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🔒 Run Security Audit
      run: npm audit --audit-level moderate
      
    - name: 🔍 Run Security Scan with Snyk
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  build-test:
    name: 🏗️ Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🏗️ Generate Prisma Client
      run: npx prisma generate
      
    - name: 🔨 Build Application
      run: npm run build
      
    - name: 📤 Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: dist/

  docker-test:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🏗️ Build Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: task-management-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 🧪 Test Docker Container
      run: |
        docker run --name test-container -d \
          -e DATABASE_URL="postgresql://test:test@host.docker.internal:5432/test" \
          -e JWT_SECRET="test-secret" \
          -e JWT_REFRESH_SECRET="test-refresh-secret" \
          -p 3000:3000 \
          task-management-backend:test
        
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:3000/ || exit 1
        
        docker stop test-container

  performance-test:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: test_taskmanagement
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🏗️ Generate Prisma Client
      run: npx prisma generate
      
    - name: 🗄️ Run Database Migrations
      run: npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5433/test_taskmanagement?schema=public
        
    - name: ⚡ Run Performance Tests
      run: |
        # Run the e2e tests which include performance testing
        npm run test:integration
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5433/test_taskmanagement?schema=public
        JWT_SECRET: test-jwt-secret-key-for-ci
        JWT_REFRESH_SECRET: test-refresh-token-secret-for-ci
        NODE_ENV: test

  test-summary:
    name: 📋 Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, security-audit, build-test, docker-test]
    if: always()
    
    steps:
    - name: 📊 Test Results Summary
      run: |
        echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| 🔬 Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🏗️ Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🔒 Security Audit | ${{ needs.security-audit.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🏗️ Build Test | ${{ needs.build-test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🐳 Docker Test | ${{ needs.docker-test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.unit-tests.result }}" == "success" && 
              "${{ needs.integration-tests.result }}" == "success" && 
              "${{ needs.security-audit.result }}" == "success" && 
              "${{ needs.build-test.result }}" == "success" && 
              "${{ needs.docker-test.result }}" == "success" ]]; then
          echo "## ✅ All tests passed! Ready for deployment 🚀" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ❌ Some tests failed. Please review and fix issues." >> $GITHUB_STEP_SUMMARY
        fi
